#include <iostream>
#include <vector>

struct Task {
    std::string description;
    bool completed;
};

class ToDoList {
private:
    std::vector<Task> tasks;

public:
    void addTask(const std::string& description) {
        tasks.push_back({description, false});
        std::cout << "Task added: " << description << std::endl;
    }

    void viewTasks() const {
        if (tasks.empty()) {
            std::cout << "No tasks found." << std::endl;
            return;
        }

        std::cout << "Tasks:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            std::cout << i + 1 << ". " << (tasks[i].completed ? "[Completed] " : "[Pending] ") << tasks[i].description << std::endl;
        }
    }

    void markTaskAsCompleted(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            tasks[index - 1].completed = true;
            std::cout << "Marked task as completed: " << tasks[index - 1].description << std::endl;
        } else {
            std::cout << "Invalid task index." << std::endl;
        }
    }

    void removeTask(size_t index) {
        if (index >= 1 && index <= tasks.size()) {
            std::cout << "Removed task: " << tasks[index - 1].description << std::endl;
            tasks.erase(tasks.begin() + index - 1);
        } else {
            std::cout << "Invalid task index." << std::endl;
        }
    }
};

int main() {
    ToDoList toDoList;

    while (true) {
        std::cout << "\n===== ToDo List Manager =====\n1. Add Task\n2. View Tasks\n3. Mark Task as Completed\n4. Remove Task\n5. Exit\n=============================\nEnter your choice: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: std::cout << "Enter task description: "; std::cin.ignore(); std::getline(std::cin, toDoList.addTask(description)); break;
            case 2: toDoList.viewTasks(); break;
            case 3: std::cout << "Enter task index to mark as completed: "; size_t index; std::cin >> index; toDoList.markTaskAsCompleted(index); break;
            case 4: std::cout << "Enter task index to remove: "; size_t index; std::cin >> index; toDoList.removeTask(index); break;
            case 5: std::cout << "Exiting the program.\n"; return 0;
            default: std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
